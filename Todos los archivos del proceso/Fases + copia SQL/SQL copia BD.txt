-- A TENER EN CUENTA
-- 1. No hemos creado indexes más allá de los que crea el propio programa con las PK (no los considerábamos necesarios)
-- 2. Para dar privilegios y que los administradores puedan realizar funciones CRUD (Create Read Update Delete) utilizaríamos estos comandos, primero crearíamos el usuario para el administrador y luego le otorgaríamos privilegios. Asímismo se los quitaríamos una vez terminase esa junta y/o perdiese el cargo.
------ Crear usuario: CREATE USER 'user'@'localhost' IDENTIFIED BY 'password';
------ Dar privilegios: GRANT ALL PRIVILEGES ON database.table TO 'user'@'localhost';
------ Denegar privilegios: DENY ALL PRIVILEGES ON database.table TO 'user'@'localhost';
---------- En java, nos basamos en el valor de la variable "perfil" cuyo valor es "usuario" ó "administrador", utilizando este valor mostraremos unos datos y opciones u otros
-- 3. Nos gustaría tener los siguientes procedimientos automáticos (por fecha)
------ 3.1. Procedimiento que cree automáticamente una Junta al finalizar la actual (aquí podríamos barajar la posibilidad de que los miembros se eligiesen al azar, o se determinasen con antelación, etc)
------ 3.2. Procedimiento que dé de baja automáticamente a los socios que no hayan pagado su cuota (asímismo un trigger o el propio procedimiento dará de baja a los socios de los que este sea responsable)
------ 3.3. Procedimiento que restablezca automáticamente el valor "haPagado" de la tabla Socios a 'NO' (haPagado = false en Java) 
-- 4. Con el gran uso que le hemos dado a Java no hemos creado procedimientos que recorran listas usando Cursores y FETCH, pero los hemos tenido totalmente en cuenta
-- 5. Los problemas con el ordenador y su repentino formateo nos hicieron perder parte de los progresos tanto en código como en base de datos, somos conscientes de quizás haber olvidado algún método o procedimiento que teníamos encaminado preo creemos haber recuperado la gran mayoría de lo perdido
-- 6. Consideramos que las Juntas se deberían crear directamente desde la base de datos, puesto que bajo nuestro punto de vista, se deberían definir los plazos de la junta y los socios que participarán con los distintos cargos, una vez finalizase la Junta activa, se debería crear una nueva junta (INSERT INTO JUNTAS...) una nueva junta anual o semestral introduciendo también los nuevos cargos para los socios (y que uno o varios triggers se encargasen de modificar automáticamente los perfiles USUARIO/ADMINISTRADOR en la tabla SOCIOS

-- REFLEXIÓN
-- Pese a haber diseñado a conciencia los primeros diagramas, hemos visto que finalmente se han necesitado una infinidad de métodos nuevos así como clases (por ejemplo, en nuestro caso, por cada clases hemos creado otra clase llamada similarmente pero acabada en BD, por ejemplo, Socio y SocioBD, SocioBD contenía todos los métodos para realizar llamadas a los datos, inserciones, updates...)
-- Creemos que el proyecto nos ha servido para aprender bastante, una grandísima parte de aprender tanto en programación como en base de datos consiste en informarse uno mismo por su cuenta, y con este proyecto todos nos hemos visto forzados a navegar por una inmensa cantidad de páginas buscando la información necesitada, aprendiendo a entender cómo explica la gente estos códigos y a tener ese conocimiento base de "cómo y dónde buscar" (aunque a veces las búsquedas no tenían mucho éxito). Además, el programar una cosa que te da error una y otra vez hace que una vez lo consigas, lo almacenes mejor en tu memoria, en cambio si te lo dan hecho, lo aprendes de pasada y es más fácil olvidarlo.
-- Este proyecto podría enredarse y complicarse tanto como quisieramos, cada vuelta que le damos se nos ocurre un método más, una forma de hacer más eficiente el código de Java, un nuevo procedimiento o trigger...

-- DUDAS AÚN PENDIENTES:
-- 1- Cómo programar que un procedimiento se ejecute en una determinada fecha
-- 2- Errores con el Trigger, comprobar



-- SELECTS Y DESCRIBES COMUNES
DESCRIBE CUOTAS;
DESCRIBE USUARIOS;
DESCRIBE SOCIOS;
SELECT * FROM SOCIOS;
SELECT * FROM USUARIOS;
SELECT * FROM CARGOS;
SELECT * FROM ACTIVIDADES;
SELECT * FROM USER_CONSTRAINTS ORDER BY CONSTRAINT_NAME DESC;
SELECT * FROM ALL_CONS_COLUMNS;
SET SERVEROUTPUT ON;
SHOW ERRORS;

--------------------------------------------------------------------------------

-- PROYECTO FINAL, GRUPO MONTAÑA ARABA (com.ArabaMountainPartnership)
--Usuarios específicos para el proyecto: eqdam07 / eqdam07

--Notas:
------- Definimos las FK como ON DELETE SET NULL puesto que en el enunciado no se nos indica que se busque una continua depuración
---- de datos, donde solo se mantengan los estrictamente necesarios. Por lo que optamos por almacenar todos los datos posibles (evadiendo ON DELETE CASCADE)

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--Creación de tablas (en orden)
CREATE TABLE CUOTAS(
importe NUMBER(5,2),
anyoValidez DATE,
CONSTRAINT CUO_MULTI_PK PRIMARY KEY(importe, anyoValidez)
);

CREATE TABLE SOCIOS(
codigo VARCHAR2(5) CONSTRAINT SOC_COD_PK PRIMARY KEY,
nombre VARCHAR2(15) CONSTRAINT SOC_NOM_NN NOT NULL,
apellidos VARCHAR2(30) CONSTRAINT SOC_APE_NN NOT NULL,
fechaNac DATE CONSTRAINT SOC_FEC_NN NOT NULL,
dni VARCHAR2(9),
telefono NUMBER(9) CONSTRAINT SOC_TEL_NN NOT NULL,
email VARCHAR2(25) CONSTRAINT SOC_EMAIL_NN NOT NULL,
perfil VARCHAR2(15) CONSTRAINT SOC_PER_NN NOT NULL,
fechaAlta DATE CONSTRAINT SOC_FECALTA_NN NOT NULL,
fechaBaja DATE,
--haPagado BOOLEAN, --¿0 = false? tipo de dato Boolean no existe
importeCuota NUMBER(5,2) CONSTRAINT SOC_IMPOR_NN NOT NULL,
anyoValidezCuota DATE CONSTRAINT SOC_ANYOVALIDEZ_NN NOT NULL,
socioResponsable VARCHAR2(5),
CONSTRAINT SOC_TIPOPERFIL_CK CHECK(perfil IN('USUARIO','ADMINISTRADOR')),
CONSTRAINT SOC_IMPORANYO_FK FOREIGN KEY(importeCuota, anyoValidezCuota) REFERENCES CUOTAS(importe, anyoValidez) ON DELETE SET NULL,
CONSTRAINT SOC_SOCIORESPONSABLE_FK FOREIGN KEY(socioResponsable) REFERENCES SOCIOS(codigo) ON DELETE SET NULL
-- hemos contemplado que el dni y el email fuesen únicos pero consideramos que si un socio se da de baja puede volver a apuntarse y recibirá un nuevo código, por lo que sus datos base (dni, nombre, apellidos, email...) se duplicarán
-- CONSTRAINT SOC_EMAIL_UQ UNIQUE(email)
-- CONSTRAINT SOC_DNI_UQ UNIQUE(dni)
);
-- finalmente añadimos haPagado como un VARCHAR donde sólo aceptará (SI/NO)
ALTER TABLE SOCIOS ADD haPagado VARCHAR2(2) DEFAULT 'NO';
ALTER TABLE SOCIOS ADD CONSTRAINT SOC_PAGO_CK CHECK (haPagado IN ('SI', 'NO'));
ALTER TABLE SOCIOS MODIFY email VARCHAR2(50);

CREATE TABLE JUNTAS(
fechaInicio DATE CONSTRAINT JUN_MULTI_PK PRIMARY KEY,
fechaFin DATE CONSTRAINT JUN_FECFIN_NN NOT NULL
);

CREATE TABLE CARGOS(
tipo VARCHAR2(15),
fechaInicio DATE,
fechaFin DATE,
codSoc VARCHAR2(5),
fechaInicioJunta DATE,
CONSTRAINT CAR_MULTI_PK PRIMARY KEY(tipo, fechaInicio, fechaFin),
CONSTRAINT CAR_TIPO_CK CHECK(tipo IN('PRESIDENTE','VICEPRESIDENTE','SECRETARIO','TESORERO','VOCAL')),
CONSTRAINT CAR_COD_FK FOREIGN KEY(codSoc) REFERENCES SOCIOS(codigo) ON DELETE SET NULL,
CONSTRAINT CAR_FECINI_FK FOREIGN KEY(fechaInicioJunta) REFERENCES JUNTAS(fechaInicio) ON DELETE SET NULL
);

CREATE TABLE ACTIVIDADES(
codigo VARCHAR2(5) CONSTRAINT ACT_COD_PK PRIMARY KEY,
tipo VARCHAR2(25) CONSTRAINT ACT_TIPO_NN NOT NULL,
fecha DATE CONSTRAINT ACT_FEC_NN NOT NULL,
descripcion VARCHAR2(50) CONSTRAINT ACT_DESC_NN NOT NULL,
dificultad VARCHAR2(6) CONSTRAINT ACT_DIF_NN NOT NULL,
precio NUMBER(3,2) CONSTRAINT ACT_PREC_NN NOT NULL,
motivoSuspension VARCHAR2(100),
organizador VARCHAR2(5),
CONSTRAINT ACT_ORGANIZADOR_FK FOREIGN KEY(organizador) REFERENCES SOCIOS(codigo) ON DELETE SET NULL,
CONSTRAINT ACT_TIPO_CK CHECK(tipo IN('SALIDA AL MONTE', 'ALBERGUE FIN DE SEMANA', 'REUNIÓN', 'COMIDA', 'OTROS')),
CONSTRAINT ACT_TIPODIFICULTAD_CK CHECK(dificultad IN('ALTA','BAJA','MEDIA'))
);
--motivoSuspensión, si su valor es null representa que no ha sido suspendida
--en Java, utilizaremos la clase ActividadSuspendida para rellenar ese dato
ALTER TABLE ACTIVIDADES MODIFY PRECIO NUMBER(5,2);


--llamamos PARTICIPACIONES a las actividades realizadas por los socios
CREATE TABLE PARTICIPACIONES(
socio VARCHAR2(5),
actividad VARCHAR2(5),
CONSTRAINT PAR_MULTI_PK PRIMARY KEY(socio, actividad),
CONSTRAINT PAR_SOC_FK FOREIGN KEY(socio) REFERENCES SOCIOS(codigo) ON DELETE CASCADE,
CONSTRAINT PAR_ACT_FK FOREIGN KEY(actividad) REFERENCES ACTIVIDADES(codigo) ON DELETE CASCADE
);

CREATE TABLE FECHASDISPONIBLES(
fecha DATE CONSTRAINT FECDIS_FEC_PK PRIMARY KEY,
socio VARCHAR2(5),
CONSTRAINT FECDIS_SOC_FK FOREIGN KEY(socio) REFERENCES SOCIOS(codigo)
);

CREATE TABLE USUARIOS(
nombre VARCHAR2(16) CONSTRAINT USU_NOM_PK PRIMARY KEY,
contrasenya VARCHAR2(16),
socio VARCHAR2(5),
CONSTRAINT USU_SOC_FK FOREIGN KEY(socio) REFERENCES SOCIOS(codigo)
);

CREATE TABLE REGISTRO(
nombre VARCHAR2(16),
fecha TIMESTAMP
);

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--Inserciones de datos iniciales (para probar la BBDD la primera semana del proyecto)
INSERT INTO CUOTAS VALUES(25, '31/12/2019');
INSERT INTO SOCIOS VALUES('1111a','Daniel','Tamargo Saiz','23/09/1995','728318A',648703216,'danieltamargosaiz@gmail.com','USUARIO',SYSDATE,NULL,25,'31/12/2019',NULL,DEFAULT);
INSERT INTO SOCIOS VALUES('1111b','Daniela','Tamarga Saiz','23/09/2005','728318A',648703216,'danieltamargosaiz@gmail.com','USUARIO',SYSDATE,NULL,25,'31/12/2019','1111a',DEFAULT);

-- Inserciones posteriores
INSERT INTO USUARIOS VALUES('dani','dani','1111a');

--Usuarios normales 
--1. Lucía Fernández
INSERT INTO CUOTAS VALUES(15, '31/12/2020');
INSERT INTO SOCIOS VALUES('LF458','Lucía','Fernández Solano','28/05/1994','71122252C',648703266,'luciafernandz@gmail.com','USUARIO',SYSDATE,NULL,15,'31/12/2020',NULL,'NO');
INSERT INTO JUNTAS VALUES('01/05/2019', '01/05/2020');
--NO TIENE CARGO
INSERT INTO ACTIVIDADES VALUES('ACTN2','COMIDA','07/06/2019','Actividad número 2, prueba','ALTA',12.10,NULL,'LF458');

INSERT INTO USUARIOS VALUES('lucia','lucia','LF458');
--2.


--Usuarios administradores
--1. Elena Zamora
INSERT INTO CUOTAS VALUES(15, '31/12/2021');
INSERT INTO SOCIOS VALUES('EB420','Elena','Zamora Blanco','28/05/1994','71122252C',648703266,'elenazamora@gmail.com','USUARIO',SYSDATE,NULL,15,'31/12/2020',NULL,'NO');
--JUNTA YA EXISTE
INSERT INTO CARGOS VALUES('PRESIDENTE','01/05/2019','01/05/2020','EB420','01/05/2019');
INSERT INTO ACTIVIDADES VALUES('ACTN1','OTROS','06/06/2019','Actividad número 1, prueba','BAJA',12.10,NULL,'EB420');
INSERT INTO PARTICIPACIONES VALUES('EB420', 'ACTN1');
INSERT INTO FECHASDISPONIBLES VALUES('25/09/2019','EB420');
INSERT INTO USUARIOS VALUES('elena','elena','EB420');
--2.


--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--TRIGGERS
--Trigger que controla que el socio es mayor de 4 años
CREATE OR REPLACE TRIGGER SOCIOMAYOR4ANYOS 
BEFORE INSERT ON SOCIOS
FOR EACH ROW
DECLARE
    v_edad NUMBER(4);
BEGIN
SELECT(ROUND(MONTHS_BETWEEN(SYSDATE, :new.FECHANAC) / 12)) INTO v_edad FROM DUAL;
    IF v_edad < 4 THEN
        RAISE_APPLICATION_ERROR(-20001,'No pueden registrarse socios menores de 4 años de edad.');
    END IF;
END SOCIOMAYOR4ANYOS;

--Trigger que controla que el socio menor de edad tiene un responsable
CREATE OR REPLACE TRIGGER CONTROLRESPONSABLE 
BEFORE INSERT ON SOCIOS
FOR EACH ROW
DECLARE
    v_edad NUMBER(4);
    v_anyoActual NUMBER(4);
    v_anyoFechaNac NUMBER(4);
    v_fechaNac SOCIOS.fechaNac%TYPE;
BEGIN
    --SELECT(ROUND(MONTHS_BETWEEN(SYSDATE, :new.FECHANAC) / 12)) INTO v_edad FROM DUAL;
    --SELECT EXTRACT(YEAR FROM SYSDATE) INTO v_anyoActual;
    v_anyoActual:=EXTRACT(YEAR FROM SYSDATE);
    v_anyoFechaNac:=EXTRACT(YEAR FROM :new.FECHANAC);
    v_edad:=v_anyoActual - v_anyoFechaNac;
    IF v_edad < 18 THEN
        IF :new.SOCIORESPONSABLE IS NULL THEN
            RAISE_APPLICATION_ERROR(-20002,'Los socios menores de edad tienen que tener un socio responsable.');
        ELSE
            SELECT FECHANAC INTO v_fechaNac FROM SOCIOS WHERE CODIGO=:new.SOCIORESPONSABLE;
            --SELECT(ROUND(MONTHS_BETWEEN(SYSDATE, (SELECT FECHANAC FROM SOCIOS WHERE CODIGO=:new.SOCIORESPONSABLE)) / 12)) INTO v_edad FROM DUAL;
            v_anyoFechaNac:=EXTRACT(YEAR FROM v_fechaNac);
            v_edad:=v_anyoActual - v_anyoFechaNac;
            IF v_edad < 18 THEN
                RAISE_APPLICATION_ERROR(-20003,'Los socios menores de edad no pueden ser socios responsables.');
            END IF;
        END IF;
    END IF;
END CONTROLRESPONSABLE;
-- Prueba
INSERT INTO SOCIOS(CODIGO, NOMBRE, APELLIDOS, FECHANAC, DNI, TELEFONO, EMAIL, PERFIL, FECHAALTA, IMPORTECUOTA, ANYOVALIDEZCUOTA, SOCIORESPONSABLE, HAPAGADO) 
VALUES('9999X','Ejemplo','Ejem Plo','31/12/2010','99999999X',
999999999,'ejemplo@ejemplo.plo','USUARIO','14/05/2010',25,'31/12/2019','1111b','NO');

--Trigger que controla que las fechas creadas para las futuras actividades sean fechas posteriores a la fecha actual (quizás mejor en Java)


--Trigger que guarda automáticamente la información del Log (no tenemos privilegios suficientes)
CREATE OR REPLACE TRIGGER REGISTROUSUARIO
AFTER LOGON
ON DATABASE
BEGIN
INSERT INTO REGISTRO VALUES(USER,SYStimestamp);
END REGISTROUSUARIO;

--Trigger que actualiza automáticamente el perfil USUARIO a ADMINISTRADOR
CREATE OR REPLACE TRIGGER CONTROLPERFIL 
AFTER INSERT ON CARGO
FOR EACH ROW
DECLARE
BEGIN
    UPDATE SOCIOS
    SET PERFIL='ADMINISTRADOR'
    WHERE CODIGO=:new.CODSOC;
    IF SQL%NOTFOUND THEN
        RAISE_APPLICATION_ERROR(-20010,'Error al alterar el perfil del socio ' || :new.CODSOC || '.');
    END IF;
END CONTROLPERFIL;


-- -20001 = Socios menores de 4 años
-- -20002 = Socios menores de 18 años sin socio responsable
-- -20003 = Los socios menores de edad no pueden ser socios responsables.
-- -20020 = Error al cargar los datos. (NO DATA FOUND)
-- -20025 = Error desconocido. (WHEN OTHERS)

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------


--Paquete con los procedimientos: RESETEODEPAGOS y DARDEBAJA y la función CUOTAINFANTIL
CREATE OR REPLACE PACKAGE PAQUETE1 IS
    PROCEDURE RESETEODEPAGOS;
    PROCEDURE DARDEBAJA (p_codigo IN SOCIOS.codigo%TYPE);
    FUNCTION CUOTAINFANTIL (p_cuota IN CUOTAS.importe%type) RETURN NUMBER;
END;

CREATE OR REPLACE PACKAGE BODY PAQUETE1 IS
    PROCEDURE RESETEODEPAGOS
        IS
        BEGIN
            UPDATE SOCIOS
            SET HAPAGADO='NO';
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                RAISE_APPLICATION_ERROR(-20020,'Error al cargar los datos.');
            WHEN OTHERS THEN
                RAISE_APPLICATION_ERROR(-20020,'Error desconocido.');
        END RESETEODEPAGOS;
    PROCEDURE DARDEBAJA (p_codigo IN SOCIOS.codigo%TYPE)
        IS
        BEGIN
            SELECT COUNT(*) INTO v_num FROM SOCIOS;
            
            UPDATE SOCIOS
            SET FECHABAJA=SYSDATE
            WHERE CODIGO=p_codigo;
            
            UPDATE SOCIOS
            SET FECHABAJA=SYSDATE
            WHERE SOCIORESPONSABLE=p_codigo;

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                RAISE_APPLICATION_ERROR(-20020,'Error al cargar los datos.');
            WHEN OTHERS THEN
                RAISE_APPLICATION_ERROR(-20025,'Error desconocido.');
        END DARDEBAJA;
    FUNCTION CUOTAINFANTIL (p_cuota IN CUOTAS.importe%type)
        RETURN NUMBER
        IS
            v_cuota CUOTAS.importe%type;
        BEGIN
            v_cuota:=p_cuota * 0.8;
            RETURN v_cuota;
        END CUOTAINFANTIL;
END;
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--Vistas
CREATE OR REPLACE VIEW CALENDARIO AS   
    (SELECT A.FECHA, A.TIPO, A.DESCRIPCION, A.PRECIO, S.NOMBRE, S.APELLIDOS, A.MOTIVOSUSPENSION 
    FROM ACTIVIDADES A, SOCIOS S)
WITH READ ONLY CONSTRAINT CAL_DML_RO;

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--Procedimientos y funciones que fueron empaquetados
CREATE OR REPLACE FUNCTION CUOTA_INFANTIL
    (p_cuota IN CUOTAS.importe%type)
RETURN NUMBER
IS
    v_cuota CUOTAS.importe%type;
BEGIN
    v_cuota:=p_cuota * 0.8;
    RETURN v_cuota;
END CUOTA_INFANTIL;
DROP FUNCTION CUOTA_INFANTIL; --Lo eliminamos para introducirlo en un paquete
-----------------
----PROCEDIMIENTO QUE DÉ DE BAJA A LOS QUE NO HAYAN PAGADO SU CUOTA AL TERMINAR EL AÑO
CREATE OR REPLACE PROCEDURE DARDEBAJA
    (p_codigo IN SOCIOS.codigo%TYPE)
IS
    v_num NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_num FROM SOCIOS;
    
    UPDATE SOCIOS
    SET FECHABAJA=SYSDATE
    WHERE CODIGO=p_codigo;
    
    FOR i IN 1..v_num LOOP
        UPDATE SOCIOS
        SET FECHABAJA=SYSDATE
        WHERE SOCIORESPONSABLE=p_codigo;
    END LOOP;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20020,'Error al cargar los datos.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20025,'Error desconocido.');
END DARDEBAJA;
DROP PROCEDURE DARDEBAJA; --Lo eliminamos para introducirlo en un paquete
---------------
----PROCEDIMIENTO QUE RESETEE EL VALOR DE HAPAGADO DE CADA SOCIO AL COMENZAR EL AÑO
CREATE OR REPLACE PROCEDURE RESETEODEPAGOS
IS
BEGIN
    UPDATE SOCIOS
    SET HAPAGADO='NO';
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20020,'Error al cargar los datos.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20020,'Error desconocido.');
END RESETEODEPAGOS;
DROP PROCEDURE RESETEODEPAGOS; --Lo eliminamos para introducirlo en un paquete




